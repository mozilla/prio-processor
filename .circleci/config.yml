# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# https://github.com/mozilla-services/Dockerflow/blob/master/.circleci/config.yml
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS

version: 2
jobs:
  build:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build development image
          command: |
            docker build -t prio:latest .
      - run:
          name: Save image into cache
          command: |
            docker save -o /tmp/latest.tar "prio:latest"
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/latest.tar

  test:
    docker:
      - image: docker:stable-git
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}
      - run:
          name: Restore cache
          command: |
            docker load -i /tmp/latest.tar
      - run:
          name: Run the default tests
          command: docker run prio:latest

  test-batch-example:
    machine: true
    working_directory: ~/prio-processor/examples/batched-processing
    steps:
      - checkout:
          path: ~/prio-processor
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/latest.tar
      - run:
          name: Build the compose container
          command: |
            # examples expect a prio:dev image
            docker tag latest dev
            docker-compose build
      - run:
          name: Test batched-processing integration with MinIO
          command: make test

  deploy:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/latest.tar
      - run:
          name: Rerun sanity checks before deploy
          command: docker run prio:latest
      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag prio:latest ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag prio:latest "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-batch-example:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master
