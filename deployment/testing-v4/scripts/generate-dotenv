#!/usr/bin/env bash
# Generate dotenv files for each of the compose configurations

set -e

PROJECT=${PROJECT:-amiyaguchi-prio-processor-v4}
TAG=${TAG:-mozilla/prio-processor:v3.0.0}

if [[ $(gcloud config get-value project) != "$PROJECT" ]]; then 
    echo "project is not set correctly; run 'gcloud config set project $PROJECT'"
    exit 1
fi

function get-key {
    local json=$1
    local key=$2
    echo "$json" | jq -r ".$key"
}

# reuse results from a single gsutil call
_results=$(gsutil ls)
function get-bucket {
    local pattern=$1
    path=$(echo "$_results" | grep "$pattern")
    # strip any trailing slashes
    echo ${path%/}
}

# work from the parent directory
cd "$(dirname "$0")/.."

keys_a=$(docker run -it "$TAG" prio keygen)
keys_b=$(docker run -it "$TAG" prio keygen)
seed=$(docker run -it "$TAG" prio shared-seed)

# list out all the variables we might need...
app_name="test-app"
bucket_prefix="$app_name/v1"
data_config="/app/config/content.json"
origin_config="/app/config/telemetry_origin_data_inc.json"

cat << EOF > compose/ingest/.env.template
# This configuration is generated by scripts/generate-dotenv. Do not check in
# manually edited values into source control.

APP_NAME=$app_name
DATA_CONFIG=$data_config
ORIGIN_CONFIG=$origin_config
BUCKET_PREFIX=$bucket_prefix

# relative to the docker-compose file
GOOGLE_APPLICATION_CREDENTIALS="../../.secrets/service-account-ingest-private-key.json"

PUBLIC_KEY_HEX_INTERNAL=$(get-key "$keys_a" public_key)
BUCKET_INTERNAL_INGEST=$(get-bucket a-ingest)

PUBLIC_KEY_HEX_EXTERNAL=$(get-key "$keys_b" public_key)
BUCKET_EXTERNAL_INGEST=$(get-bucket b-ingest)

# The ingest also gets access to the private internal bucket, because ingest and
# server A are operated by the same entity in the origin telemetry setup
BUCKET_INTERNAL_PRIVATE=$(get-bucket a-private)
DATASET=telemetry
TABLE=content_blocking
BQ_REPLACE=true
CLOUDSDK_CORE_PROJECT=$PROJECT
EOF
cp compose/ingest/.env.template compose/ingest/.env

function server-env {
    local server_id=$1
    local internal_key=$2
    local external_key=$3
    local other_id;
    other_id=$(if [[ $server_id == a ]]; then echo b; else echo a; fi)
    cat << EOF > "compose/server-$server_id/.env.template"
# This configuration is generated by scripts/generate-dotenv. Do not check in
# manually edited values into source control.

APP_NAME=$app_name
DATA_CONFIG=$data_config
BUCKET_PREFIX=$bucket_prefix
SERVER_ID=$(echo "$server_id" | tr '[:lower:]' '[:upper:]')
SHARED_SECRET=$(get-key "$seed" shared_seed)

# relative to the docker-compose file
GOOGLE_APPLICATION_CREDENTIALS="../../.secrets/service-account-${server_id}-private-key.json"

PRIVATE_KEY_HEX=$(get-key "$internal_key" private_key)
PUBLIC_KEY_HEX_INTERNAL=$(get-key "$internal_key" public_key)
BUCKET_INTERNAL_INGEST=$(get-bucket "${server_id}-ingest")
BUCKET_INTERNAL_PRIVATE=$(get-bucket "${server_id}-private")
BUCKET_INTERNAL_SHARED=$(get-bucket "${server_id}-shared")

PUBLIC_KEY_HEX_EXTERNAL=$(get-key "$external_key" public_key)
BUCKET_EXTERNAL_SHARED=$(get-bucket "${other_id}-shared")
EOF
    cp "compose/server-$server_id/.env.template" "compose/server-$server_id/.env"
}

server-env a "$keys_a" "$keys_b"
server-env b "$keys_b" "$keys_a"

